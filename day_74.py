# -*- coding: utf-8 -*-
"""day_74.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cw6F07Fz73raTtseLk8S9jvQL0nCg08L
"""



"""### Entendendo a relaçao entre temas de LEGO x sets de LEGO



Explorando a loja de lego nos vamos ver seus produtos organizados por nome. Os nomes incluem Star Wars, Batman, Harry Pottere muitos outros.
<img src="https://i.imgur.com/49FNOHj.jpg">



"""

import pandas as pd
import matplotlib.pyplot as plt

colors = pd.read_csv('data/colors.csv')
colors.head()

#quantas cores unicas nos temos
cores_unicas = colors.nunique(axis=1)
cores_unicas

#quantidade de transparente e opaca usando o metodo group by e count
colors.groupby('is_trans').count()

sets = pd.read_csv('data/sets.csv')
sets.head()

sets.sort_values('year').head()

#quantos legos foram feitos no ano de 1949?
#seleciona os registro do data frame onde o ano e igual a 1949
sets[sets['year'] == 1949]

#selecionando os temas de lego que possuem a maior quantidade de peças
sets.sort_values('num_parts', ascending=False).head()

#calculando o numero de sets por ano e fazendo um grafico
#o agrupamento por data significa quantas entradas/registros tiveram essa data. Por exemplo no ano de 1949 tivemos 5 registros/temas lançados
sets_per_year = sets.groupby('year').count()
sets_per_year['set_num'].head()
plt.plot(sets_per_year.index[:-2], sets_per_year.set_num[:-2])
plt.show()

#aprendendo a usar o .agg()
themes_per_year = sets.groupby('year').agg({'theme_id': pd.Series.nunique})

themes_per_year.rename(columns= {'theme_id': 'nr_themes'}, inplace=True)
themes_per_year.head()

themes_per_year.tail()

plt.plot(themes_per_year.index[:-2], themes_per_year.nr_themes[:-2])
plt.show()

#agora vamos fazer um grafico contendo duas informaçoes
#o metodo .twinx() nos permite criar outro eixo, dessa maneira podemos comparar um valor de x para dois y diferentes.
ax1 = plt.gca()
ax2 = ax1.twinx()

ax1.plot(sets_per_year.index[:-2], sets_per_year.set_num[:-2], color='g')
ax2.plot(themes_per_year.index[:-2], themes_per_year[:-2], 'b')

plt.title('Crescimento do numero de tematicas x numero de temas')
ax1.set_xlabel('Ano')
ax1.set_ylabel('Numero sets', color='green')
ax2.set_ylabel('Numero de tematicas', color='blue')

#usando .groupby() e .agg() para criar um novo df
parts_per_set = sets.groupby('year').agg({'num_parts': pd.Series.mean})
#agora vamos fazer um grafico de dispersao para entender o tamanho e complexidade dos sets de lego baseando-se na media de peças
plt.scatter(parts_per_set.index[:-2], parts_per_set.num_parts[:-2])
plt.title('Crescimento do numero de peças por ano')
plt.xlabel('Ano')
plt.ylabel('Numero de peças')

"""#Utilizando conceitos de foreign keys e primary keys para mesclar dois dataFrames

<img src="https://i.imgur.com/Sg4lcjx.png">
"""

themes = pd.read_csv('data/themes.csv')
themes.head()

themes[themes.name == 'Star Wars']

sets[sets.theme_id == 18]

sets[sets.theme_id == 209]

set_theme_count = sets["theme_id"].value_counts()
set_theme_count[:5]


set_theme_count = pd.DataFrame({'id':set_theme_count.index,
                                'set_count':set_theme_count.values})
set_theme_count.head()

merged_df = pd.merge(set_theme_count, themes, on='id')
#agora vamos criar um grafico com o nome dos dez primeiros themas que possuem mais sets

plt.figure(figsize=(9, 8))
plt.xticks(fontsize=14, rotation=45)
plt.yticks(fontsize=14)
plt.title('As 10 tematicas que possuem mais sets')
plt.ylabel('Numero de sets', fontsize=14)
plt.xlabel('Tematica', fontsize=14)

plt.bar(merged_df.name[:10], merged_df.set_count[:10])